extends Node3D

var bleft = true
@onready var ovrhandmodel =$ovr_left_hand_model if bleft else $ovr_right_hand_model
#onready var skel = $ovr_right_hand_model/ArmatureRight/Skeleton
@onready var rpmavatar = $readyplayerme_avatar

const Dapply_readyplayerme_hand = false

func _process(delta):
	pass
	

	#setbonestorods()
	#hand()
	#sethandpos()

# derived from Godot4 work
#var jointransforms1 = str_to_var("[Transform3D(0.326825, -0.944994, -0.0130714, 0.56508, 0.206482, -0.79878, 0.757542, 0.253675, 0.601481, -0.120256, 0.981231, -0.170304), Transform3D(-0.875445, -0.480444, -0.052629, 0.481496, -0.857512, -0.181201, 0.041927, -0.183972, 0.982037, -0.112533, 0.981252, -0.212168), Transform3D(-0.875445, -0.480444, -0.052629, 0.481496, -0.857512, -0.181201, 0.041927, -0.183972, 0.982037, -0.112533, 0.981252, -0.212168), Transform3D(-0.875962, -0.397471, -0.273328, 0.480337, -0.666603, -0.570014, 0.0443627, -0.6306, 0.774838, -0.110406, 0.988574, -0.251848), Transform3D(-0.875098, -0.295405, -0.383328, 0.482091, -0.462818, -0.7439, 0.0423406, -0.835784, 0.547423, -0.101519, 1.00711, -0.277044), Transform3D(-0.875098, -0.295405, -0.383328, 0.482091, -0.462818, -0.7439, 0.0423407, -0.835784, 0.547423, -0.0898405, 1.02977, -0.29372), Transform3D(-0.826294, -0.236638, -0.511117, 0.519318, -0.6714, -0.528706, -0.218052, -0.702299, 0.677664, -0.0652711, 1.03133, -0.301405), Transform3D(-0.889675, -0.419414, -0.180472, 0.435776, -0.661981, -0.60982, 0.136298, -0.621187, 0.771719, -0.10865, 0.994624, -0.284641), Transform3D(-0.886995, -0.323732, -0.329298, 0.443123, -0.396062, -0.804224, 0.129931, -0.859262, 0.494758, -0.100837, 1.02102, -0.318046), Transform3D(-0.887835, -0.269842, -0.372739, 0.44116, -0.268762, -0.856239, 0.130871, -0.924636, 0.35766, -0.0915266, 1.04376, -0.332035), Transform3D(-0.887835, -0.269842, -0.372739, 0.44116, -0.268762, -0.856239, 0.130871, -0.924636, 0.35766, -0.0830201, 1.0633, -0.340197), Transform3D(-0.901009, -0.269049, -0.340287, 0.431227, -0.470183, -0.770046, 0.047183, -0.840559, 0.539661, -0.0712039, 1.07355, -0.348978), Transform3D(-0.875504, -0.406578, -0.261125, 0.481358, -0.686567, -0.544904, 0.042266, -0.60276, 0.796802, -0.108802, 0.994097, -0.281781), Transform3D(-0.877922, -0.306113, -0.368167, 0.476467, -0.482687, -0.734841, 0.0472349, -0.820552, 0.569616, -0.097546, 1.01759, -0.316128), Transform3D(-0.874474, -0.190074, -0.44628, 0.483096, -0.258326, -0.836591, 0.0437289, -0.947174, 0.317724, -0.0852988, 1.04203, -0.335078), Transform3D(-0.874474, -0.190074, -0.446281, 0.483096, -0.258325, -0.836591, 0.0437289, -0.947174, 0.317723, -0.0737436, 1.06369, -0.343304), Transform3D(-0.905339, -0.273577, -0.324831, 0.409881, -0.362666, -0.836941, 0.111162, -0.890858, 0.440471, -0.0722691, 1.0804, -0.348699), Transform3D(-0.884557, -0.428519, -0.1842, 0.45137, -0.68687, -0.569626, 0.117574, -0.587009, 0.800997, -0.109061, 0.993207, -0.276958), Transform3D(-0.883273, -0.363839, -0.29572, 0.454776, -0.511412, -0.729134, 0.114052, -0.77851, 0.617182, -0.101632, 1.01618, -0.309263), Transform3D(-0.886286, -0.271861, -0.374951, 0.447848, -0.29676, -0.843425, 0.118024, -0.915437, 0.384767, -0.0932068, 1.03695, -0.326846), Transform3D(-0.886286, -0.271862, -0.374951, 0.447848, -0.296761, -0.843424, 0.118024, -0.915436, 0.384768, -0.084797, 1.05587, -0.335474), Transform3D(-0.864287, -0.494142, -0.0939769, 0.243904, -0.248314, -0.93747, 0.439907, -0.833165, 0.335138, -0.0952418, 1.07794, -0.336819), Transform3D(-0.871816, -0.444916, -0.204905, 0.489626, -0.803706, -0.338117, -0.0142492, -0.395102, 0.918526, -0.109225, 0.992642, -0.273894), Transform3D(-0.877907, -0.377447, -0.294639, 0.478804, -0.685537, -0.548439, 0.00502035, -0.622553, 0.782561, -0.103104, 1.00274, -0.301334), Transform3D(-0.868773, -0.303459, -0.391339, 0.495059, -0.551786, -0.671154, -0.0122678, -0.776816, 0.629608, -0.0978069, 1.0126, -0.315403), Transform3D(-0.868773, -0.303459, -0.391339, 0.495059, -0.551787, -0.671154, -0.0122679, -0.776816, 0.629608, -0.0907557, 1.02469, -0.326747)]")
var jointransforms1 = str_to_var("[Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0), Transform3D(0.0177277, -0.780951, 0.62434, 0.937346, 0.230287, 0.261438, -0.347948, 0.580588, 0.736104, -0.029178, -0.0179138, -0.0252983), Transform3D(0.0177277, -0.780951, 0.62434, 0.937346, 0.230287, 0.261438, -0.347948, 0.580588, 0.736104, -0.029178, -0.0179138, -0.0252983), Transform3D(0.018749, -0.984294, 0.175538, 0.938213, 0.0779988, 0.337153, -0.34555, 0.158371, 0.924939, -0.054405, -0.0284777, -0.055041), Transform3D(0.0184905, -0.991216, -0.130949, 0.937246, -0.0284255, 0.347508, -0.348179, -0.129157, 0.928488, -0.0601132, -0.0394405, -0.0851177), Transform3D(0.0184905, -0.991216, -0.130949, 0.937246, -0.0284255, 0.347508, -0.348179, -0.129157, 0.928488, -0.0561228, -0.0500275, -0.113403), Transform3D(0.964214, -0.14633, 0.221086, 0.185985, 0.967611, -0.1707, -0.188946, 0.20571, 0.960199, -0.0210733, -0.00155725, -0.014787), Transform3D(0.977105, -0.211156, 0.0260674, 0.195334, 0.938881, 0.283455, -0.0843275, -0.271874, 0.958631, -0.0373887, 0.0110405, -0.0856477), Transform3D(0.977227, -0.207862, -0.042683, 0.190617, 0.77151, 0.60699, -0.0932397, -0.601303, 0.793562, -0.038517, -0.00122977, -0.127144), Transform3D(0.977075, -0.19881, -0.0761528, 0.19221, 0.669965, 0.717079, -0.0915429, -0.715277, 0.69282, -0.0373099, -0.0183927, -0.149582), Transform3D(0.977075, -0.19881, -0.0761527, 0.19221, 0.669966, 0.717078, -0.091543, -0.715277, 0.69282, -0.035572, -0.0347575, -0.165393), Transform3D(0.996362, -0.0785602, 0.0330307, 0.083606, 0.97618, -0.200207, -0.0165156, 0.20224, 0.979197, -0.00711951, 0.0021773, -0.0163189), Transform3D(0.996367, -0.0849602, -0.00584636, 0.0836167, 0.962976, 0.256293, -0.0161448, -0.255851, 0.966582, -0.0094609, 0.0163692, -0.0857307), Transform3D(0.996183, -0.07796, -0.0392549, 0.0867693, 0.835672, 0.542331, -0.00947586, -0.543667, 0.839248, -0.00920885, 0.00532057, -0.127396), Transform3D(0.996576, -0.0648171, -0.0513261, 0.0812012, 0.650532, 0.755126, -0.0155557, -0.756708, 0.653568, -0.00790306, -0.0127198, -0.155315), Transform3D(0.996576, -0.064817, -0.0513262, 0.0812012, 0.650531, 0.755126, -0.0155557, -0.756708, 0.653568, -0.0065741, -0.0322718, -0.172238), Transform3D(0.99457, 0.025077, -0.101005, -0.0390913, 0.989484, -0.139257, 0.096451, 0.14245, 0.985092, 0.00654516, 0.000513446, -0.0163477), Transform3D(0.983537, 0.0857187, -0.159084, -0.0340092, 0.952409, 0.302921, 0.177479, -0.292524, 0.939644, 0.0132089, 0.00970065, -0.0813394), Transform3D(0.984249, 0.124322, -0.125693, -0.036306, 0.83796, 0.544522, 0.173022, -0.531382, 0.829275, 0.0196249, -0.00251676, -0.119236), Transform3D(0.98335, 0.154228, -0.0961052, -0.0304371, 0.661178, 0.749612, 0.179153, -0.734206, 0.654863, 0.023206, -0.0180301, -0.142862), Transform3D(0.98335, 0.154228, -0.0961052, -0.0304371, 0.661178, 0.749611, 0.179154, -0.734205, 0.654864, 0.0253611, -0.0348431, -0.157548), Transform3D(0.927157, 0.22841, -0.296999, -0.240122, 0.970738, -0.00304433, 0.287613, 0.0741386, 0.954873, 0.0189813, -0.00247817, -0.0152136), Transform3D(0.942906, 0.274851, -0.188108, -0.237988, 0.951123, 0.196787, 0.233001, -0.140784, 0.962232, 0.0376493, -0.00228678, -0.0752323), Transform3D(0.939449, 0.316761, -0.13076, -0.229868, 0.865477, 0.445094, 0.254159, -0.388086, 0.885885, 0.0432689, -0.00816567, -0.103977), Transform3D(0.941219, 0.335934, -0.0354298, -0.244295, 0.749373, 0.615434, 0.233295, -0.570603, 0.787391, 0.0456196, -0.0161674, -0.119904), Transform3D(0.941219, 0.335934, -0.0354298, -0.244295, 0.749373, 0.615434, 0.233295, -0.570603, 0.787391, 0.0462579, -0.0272563, -0.134091)]")

# generated locally
#var jointransforms1 = str_to_var("[Transform3D(-1.19209e-07, 1, -5.96046e-08, 5.96046e-08, 0, 1, 1, 5.96046e-08, -1.19209e-07, 0.0131598, 0.941626, -0.224968), Transform3D(0.937346, 0.230287, 0.261438, -0.347948, 0.580588, 0.736104, 0.0177278, -0.780951, 0.62434, -0.00475403, 0.916327, -0.254146), Transform3D(0.937346, 0.230287, 0.261438, -0.347948, 0.580588, 0.736104, 0.0177278, -0.780951, 0.62434, -0.00475403, 0.916327, -0.254146), Transform3D(0.938213, 0.0779989, 0.337153, -0.34555, 0.158371, 0.924939, 0.0187491, -0.984294, 0.175538, -0.0153179, 0.886585, -0.279373), Transform3D(0.937246, -0.0284254, 0.347508, -0.348179, -0.129157, 0.928488, 0.0184906, -0.991216, -0.130949, -0.0262807, 0.856508, -0.285081), Transform3D(0.937246, -0.0284254, 0.347508, -0.348179, -0.129158, 0.928488, 0.0184906, -0.991216, -0.130949, -0.0368677, 0.828223, -0.281091), Transform3D(0.185985, 0.967611, -0.1707, -0.188946, 0.20571, 0.960199, 0.964214, -0.14633, 0.221085, 0.0116025, 0.926839, -0.246041), Transform3D(0.195334, 0.938881, 0.283455, -0.0843275, -0.271874, 0.958631, 0.977105, -0.211156, 0.0260673, 0.0242003, 0.855978, -0.262357), Transform3D(0.190616, 0.77151, 0.60699, -0.0932396, -0.601303, 0.793562, 0.977227, -0.207861, -0.0426831, 0.01193, 0.814482, -0.263485), Transform3D(0.19221, 0.669965, 0.717079, -0.0915429, -0.715277, 0.69282, 0.977075, -0.19881, -0.0761529, -0.0052329, 0.792044, -0.262278), Transform3D(0.19221, 0.669966, 0.717078, -0.091543, -0.715277, 0.69282, 0.977075, -0.19881, -0.0761527, -0.0215978, 0.776233, -0.26054), Transform3D(0.0836059, 0.97618, -0.200207, -0.0165156, 0.20224, 0.979197, 0.996362, -0.0785602, 0.0330306, 0.0153371, 0.925307, -0.232088), Transform3D(0.0836166, 0.962976, 0.256293, -0.0161447, -0.255851, 0.966582, 0.996367, -0.0849601, -0.00584646, 0.0295289, 0.855895, -0.234429), Transform3D(0.0867692, 0.835672, 0.542331, -0.0094758, -0.543667, 0.839248, 0.996183, -0.0779599, -0.039255, 0.0184804, 0.814229, -0.234177), Transform3D(0.0812011, 0.650532, 0.755126, -0.0155557, -0.756708, 0.653568, 0.996576, -0.0648169, -0.0513262, 0.000439955, 0.78631, -0.232871), Transform3D(0.0812011, 0.650531, 0.755126, -0.0155557, -0.756708, 0.653568, 0.996576, -0.0648169, -0.0513262, -0.019112, 0.769388, -0.231542), Transform3D(-0.0390914, 0.989484, -0.139258, 0.096451, 0.14245, 0.985092, 0.99457, 0.025077, -0.101005, 0.0136732, 0.925278, -0.218423), Transform3D(-0.0340093, 0.952409, 0.302921, 0.177479, -0.292524, 0.939644, 0.983537, 0.0857188, -0.159084, 0.0228604, 0.860286, -0.211759), Transform3D(-0.0363061, 0.83796, 0.544522, 0.173022, -0.531382, 0.829275, 0.984249, 0.124322, -0.125693, 0.010643, 0.82239, -0.205343), Transform3D(-0.0304372, 0.661178, 0.749612, 0.179154, -0.734206, 0.654863, 0.98335, 0.154228, -0.0961052, -0.00487028, 0.798764, -0.201762), Transform3D(-0.0304373, 0.661178, 0.749611, 0.179154, -0.734205, 0.654864, 0.98335, 0.154228, -0.0961053, -0.0216833, 0.784078, -0.199607), Transform3D(-0.240122, 0.970738, -0.00304435, 0.287613, 0.0741386, 0.954873, 0.927157, 0.228411, -0.296999, 0.0106816, 0.926412, -0.205987), Transform3D(-0.237988, 0.951123, 0.196787, 0.233001, -0.140784, 0.962232, 0.942906, 0.274852, -0.188108, 0.010873, 0.866393, -0.187319), Transform3D(-0.229868, 0.865477, 0.445094, 0.254159, -0.388086, 0.885885, 0.939449, 0.316761, -0.13076, 0.00499412, 0.837648, -0.181699), Transform3D(-0.244295, 0.749373, 0.615434, 0.233295, -0.570603, 0.787391, 0.941219, 0.335934, -0.0354298, -0.0030076, 0.821722, -0.179349), Transform3D(-0.244295, 0.749373, 0.615434, 0.233295, -0.570603, 0.787391, 0.941219, 0.335934, -0.0354298, -0.0140965, 0.807534, -0.17871)]")
#var jointransforms1 = str_to_var("[Transform3D(-1.19209e-07, 1, -5.96046e-08, 5.96046e-08, 0, 1, 1, 5.96046e-08, -1.19209e-07, 0.000159787, 0.654253, 3.19246e-05), Transform3D(0.937346, 0.230287, 0.261438, -0.347948, 0.580588, 0.736104, 0.0177278, -0.780951, 0.62434, -0.017754, 0.628954, -0.029146), Transform3D(0.937346, 0.230287, 0.261438, -0.347948, 0.580588, 0.736104, 0.0177278, -0.780951, 0.62434, -0.017754, 0.628954, -0.029146), Transform3D(0.938213, 0.0779989, 0.337153, -0.34555, 0.158371, 0.924939, 0.0187491, -0.984294, 0.175538, -0.0283179, 0.599212, -0.054373), Transform3D(0.937246, -0.0284254, 0.347508, -0.348179, -0.129157, 0.928488, 0.0184906, -0.991216, -0.130949, -0.0392807, 0.569135, -0.0600813), Transform3D(0.937246, -0.0284254, 0.347508, -0.348179, -0.129158, 0.928488, 0.0184906, -0.991216, -0.130949, -0.0498677, 0.54085, -0.0560909), Transform3D(0.185985, 0.967611, -0.1707, -0.188946, 0.20571, 0.960199, 0.964214, -0.14633, 0.221085, -0.00139746, 0.639466, -0.0210413), Transform3D(0.195334, 0.938881, 0.283455, -0.0843275, -0.271874, 0.958631, 0.977105, -0.211156, 0.0260673, 0.0112003, 0.568605, -0.0373568), Transform3D(0.190616, 0.77151, 0.60699, -0.0932396, -0.601303, 0.793562, 0.977227, -0.207861, -0.0426831, -0.00106997, 0.527109, -0.0384851), Transform3D(0.19221, 0.669965, 0.717079, -0.0915429, -0.715277, 0.69282, 0.977075, -0.19881, -0.0761529, -0.0182329, 0.504671, -0.0372779), Transform3D(0.19221, 0.669966, 0.717078, -0.091543, -0.715277, 0.69282, 0.977075, -0.19881, -0.0761527, -0.0345978, 0.48886, -0.0355401), Transform3D(0.0836059, 0.97618, -0.200207, -0.0165156, 0.20224, 0.979197, 0.996362, -0.0785602, 0.0330306, 0.00233709, 0.637934, -0.00708758), Transform3D(0.0836166, 0.962976, 0.256293, -0.0161447, -0.255851, 0.966582, 0.996367, -0.0849601, -0.00584646, 0.0165289, 0.568522, -0.00942897), Transform3D(0.0867692, 0.835672, 0.542331, -0.0094758, -0.543667, 0.839248, 0.996183, -0.0779599, -0.039255, 0.00548037, 0.526856, -0.00917691), Transform3D(0.0812011, 0.650532, 0.755126, -0.0155557, -0.756708, 0.653568, 0.996576, -0.0648169, -0.0513262, -0.01256, 0.498937, -0.00787111), Transform3D(0.0812011, 0.650531, 0.755126, -0.0155557, -0.756708, 0.653568, 0.996576, -0.0648169, -0.0513262, -0.032112, 0.482015, -0.00654216), Transform3D(-0.0390914, 0.989484, -0.139258, 0.096451, 0.14245, 0.985092, 0.99457, 0.025077, -0.101005, 0.000673234, 0.637905, 0.00657709), Transform3D(-0.0340093, 0.952409, 0.302921, 0.177479, -0.292524, 0.939644, 0.983537, 0.0857188, -0.159084, 0.00986044, 0.572913, 0.0132409), Transform3D(-0.0363061, 0.83796, 0.544522, 0.173022, -0.531382, 0.829275, 0.984249, 0.124322, -0.125693, -0.00235697, 0.535017, 0.0196568), Transform3D(-0.0304372, 0.661178, 0.749612, 0.179154, -0.734206, 0.654863, 0.98335, 0.154228, -0.0961052, -0.0178703, 0.511391, 0.023238), Transform3D(-0.0304373, 0.661178, 0.749611, 0.179154, -0.734205, 0.654864, 0.98335, 0.154228, -0.0961053, -0.0346833, 0.496705, 0.025393), Transform3D(-0.240122, 0.970738, -0.00304435, 0.287613, 0.0741386, 0.954873, 0.927157, 0.228411, -0.296999, -0.00231839, 0.639039, 0.0190133), Transform3D(-0.237988, 0.951123, 0.196787, 0.233001, -0.140784, 0.962232, 0.942906, 0.274852, -0.188108, -0.00212699, 0.57902, 0.0376812), Transform3D(-0.229868, 0.865477, 0.445094, 0.254159, -0.388086, 0.885885, 0.939449, 0.316761, -0.13076, -0.00800588, 0.550275, 0.0433008), Transform3D(-0.244295, 0.749373, 0.615434, 0.233295, -0.570603, 0.787391, 0.941219, 0.335934, -0.0354298, -0.0160076, 0.534348, 0.0456515), Transform3D(-0.244295, 0.749373, 0.615434, 0.233295, -0.570603, 0.787391, 0.941219, 0.335934, -0.0354298, -0.0270965, 0.520161, 0.0462898)]")

var Djointransforms1 = str_to_var("[ Transform3D( 0.763934, 0.636679, 0.105093, -0.1919, 0.379641, -0.905012, -0.6161, 0.671202, 0.4122, -0.00185875, 0.979083, -0.225783 ), Transform3D( 0.763934, 0.636679, 0.105093, -0.1919, 0.379641, -0.905012, -0.6161, 0.671202, 0.4122, 0.0048456, 0.934733, -0.205102 ), Transform3D( 0.205111, -0.575577, 0.791606, 0.911957, -0.181249, -0.368081, 0.355336, 0.797408, 0.487725, -0.0336159, 0.966016, -0.219091 ), Transform3D( 0.395387, -0.700653, 0.593931, 0.869325, 0.0766836, -0.488256, 0.296553, 0.709369, 0.639415, -0.0601839, 0.97837, -0.23546 ), Transform3D( 0.194895, -0.682283, 0.704631, 0.921546, -0.118585, -0.369716, 0.33581, 0.721406, 0.605644, -0.0809025, 0.995402, -0.257766 ), Transform3D( 0.194895, -0.682283, 0.704631, 0.921546, -0.118586, -0.369717, 0.33581, 0.721406, 0.605644, -0.0993775, 1.0053, -0.272142 ), Transform3D( 0.763934, 0.636679, 0.105093, -0.1919, 0.379641, -0.905012, -0.6161, 0.671202, 0.4122, -0.021144, 0.96867, -0.218284 ), Transform3D( 0.817149, 0.548315, 0.177812, -0.289382, 0.65701, -0.696129, -0.498523, 0.517386, 0.695548, -0.0289489, 1.02621, -0.23604 ), Transform3D( 0.790578, 0.503933, 0.347904, -0.332431, 0.830317, -0.447284, -0.514272, 0.237959, 0.823954, -0.0359105, 1.05347, -0.263272 ), Transform3D( 0.790055, 0.545118, 0.280464, -0.383217, 0.796251, -0.468111, -0.478495, 0.262355, 0.837981, -0.0446387, 1.06469, -0.283943 ), Transform3D( 0.790055, 0.545118, 0.280463, -0.383217, 0.796251, -0.468111, -0.478495, 0.262354, 0.837981, -0.0502953, 1.07622, -0.303157 ), Transform3D( 0.763934, 0.636679, 0.105093, -0.1919, 0.379641, -0.905012, -0.6161, 0.671202, 0.4122, -0.00604683, 0.96468, -0.22548 ), Transform3D( 0.765134, 0.62384, 0.159355, -0.351586, 0.612143, -0.708285, -0.539405, 0.485905, 0.687705, -0.00856308, 1.02343, -0.246464 ), Transform3D( 0.751791, 0.535043, 0.385408, -0.372005, 0.826728, -0.422059, -0.544446, 0.173926, 0.820565, -0.0156245, 1.05482, -0.276938 ), Transform3D( 0.703524, 0.602859, 0.376317, -0.442059, 0.785838, -0.432483, -0.556451, 0.137907, 0.819356, -0.026585, 1.06682, -0.300274 ), Transform3D( 0.703524, 0.602859, 0.376317, -0.442059, 0.785838, -0.432483, -0.556451, 0.137907, 0.819356, -0.035351, 1.07875, -0.321405 ), Transform3D( 0.763934, 0.636679, 0.105093, -0.1919, 0.379641, -0.905012, -0.6161, 0.671202, 0.4122, 0.00894202, 0.961893, -0.233602 ), Transform3D( 0.70549, 0.69828, 0.121198, -0.400402, 0.533809, -0.7448, -0.584775, 0.47692, 0.65619, 0.00470529, 1.01157, -0.258473 ), Transform3D( 0.649964, 0.595619, 0.472001, -0.447387, 0.80194, -0.395899, -0.614322, 0.0461529, 0.787705, -0.000173481, 1.04156, -0.284888 ), Transform3D( 0.61193, 0.560968, 0.557545, -0.436036, 0.827412, -0.353924, -0.65986, -0.0265331, 0.75092, -0.0131209, 1.05242, -0.306495 ), Transform3D( 0.61193, 0.560968, 0.557545, -0.436036, 0.827412, -0.353924, -0.65986, -0.0265332, 0.75092, -0.0260273, 1.06256, -0.325572 ), Transform3D( 0.445769, 0.894193, -0.0413262, -0.570881, 0.248427, -0.782546, -0.689481, 0.372427, 0.621219, 0.0130946, 0.958318, -0.240754 ), Transform3D( 0.60121, 0.798902, 0.0173408, -0.495026, 0.389389, -0.776741, -0.627292, 0.4584, 0.629582, 0.0150401, 0.995195, -0.270027 ), Transform3D( 0.521341, 0.794031, 0.3126, -0.596683, 0.601079, -0.53167, -0.61006, 0.0906581, 0.787152, 0.0144902, 1.01983, -0.289992 ), Transform3D( 0.480036, 0.671801, 0.564135, -0.549112, 0.731617, -0.403996, -0.684136, -0.115841, 0.720097, 0.00793593, 1.03097, -0.306496 ), Transform3D( 0.480036, 0.671801, 0.564135, -0.549112, 0.731618, -0.403996, -0.684136, -0.115841, 0.720097, -0.00410914, 1.04117, -0.322763 ) ]")
var jointransforms2 = str_to_var("[ Transform3D( 0.0568722, 0.997616, -0.039092, -0.900991, 0.0344173, -0.432469, -0.430093, 0.059817, 0.900801, 0.0140669, 0.960979, -0.26718 ), Transform3D( 0.0568722, 0.997616, -0.039092, -0.900991, 0.0344173, -0.432469, -0.430093, 0.059817, 0.900801, 0.0134972, 0.938872, -0.223015 ), Transform3D( 0.939285, 0.319308, 0.12564, -0.0236496, 0.425522, -0.904639, -0.342321, 0.846743, 0.407238, -0.00235501, 0.982168, -0.24182 ), Transform3D( 0.882143, 0.470972, 0.00279835, -0.2194, 0.416185, -0.882413, -0.416757, 0.777801, 0.470467, -0.00657177, 1.01253, -0.255488 ), Transform3D( 0.947526, 0.318255, 0.0301435, -0.0338866, 0.193754, -0.980464, -0.317878, 0.927994, 0.194372, -0.0066694, 1.04331, -0.2719 ), Transform3D( 0.947526, 0.318255, 0.0301435, -0.0338866, 0.193754, -0.980464, -0.317878, 0.927994, 0.194372, -0.0064415, 1.06838, -0.27607 ), Transform3D( 0.0568722, 0.997616, -0.039092, -0.900991, 0.0344173, -0.432469, -0.430093, 0.059817, 0.900801, 0.0045624, 0.97342, -0.24827 ), Transform3D( 0.143312, 0.380619, 0.913559, -0.858444, 0.50715, -0.0766295, -0.492478, -0.773258, 0.399422, 0.00845379, 1.00337, -0.302276 ), Transform3D( 0.13528, -0.956574, 0.258196, -0.883433, 0.00153482, 0.468555, -0.448604, -0.291486, -0.844861, -0.0273132, 1.00637, -0.317913 ), Transform3D( 0.164046, -0.84985, -0.500843, -0.860935, -0.371191, 0.347861, -0.481538, 0.374128, -0.792558, -0.0337909, 0.994616, -0.296718 ), Transform3D( 0.164046, -0.84985, -0.500843, -0.860935, -0.371191, 0.347861, -0.481538, 0.374128, -0.792558, -0.0230781, 0.98593, -0.278172 ), Transform3D( 0.0568722, 0.997616, -0.039092, -0.900991, 0.0344173, -0.432469, -0.430093, 0.059817, 0.900801, 0.00705209, 0.957435, -0.253358 ), Transform3D( 0.044574, 0.277152, 0.959791, -0.914207, 0.398679, -0.0726665, -0.402789, -0.874209, 0.271145, 0.0146366, 0.983086, -0.311345 ), Transform3D( 0.0479952, -0.941439, 0.333749, -0.924445, 0.0846757, 0.371794, -0.378282, -0.326377, -0.866245, -0.0278941, 0.986306, -0.32336 ), Transform3D( 0.220726, -0.772857, -0.594955, -0.907627, -0.386078, 0.164795, -0.357062, 0.503623, -0.786684, -0.0373855, 0.975733, -0.298725 ), Transform3D( 0.220726, -0.772857, -0.594955, -0.907627, -0.386078, 0.164795, -0.357062, 0.503623, -0.786683, -0.0228901, 0.970743, -0.277974 ), Transform3D( 0.0568722, 0.997616, -0.039092, -0.900991, 0.0344173, -0.432469, -0.430093, 0.059817, 0.900801, 0.00958553, 0.940239, -0.26238 ), Transform3D( -0.0415731, 0.275382, 0.960435, -0.927454, 0.346897, -0.13961, -0.371618, -0.896564, 0.240983, 0.0113777, 0.961991, -0.313647 ), Transform3D( -0.0383057, -0.968029, 0.247897, -0.958312, 0.105881, 0.265381, -0.283144, -0.227397, -0.93173, -0.0272843, 0.967611, -0.323347 ), Transform3D( 0.0264407, -0.738158, -0.67411, -0.969615, -0.182998, 0.162354, -0.243204, 0.649334, -0.720568, -0.0340843, 0.960332, -0.297789 ), Transform3D( 0.0264406, -0.738158, -0.67411, -0.969615, -0.182999, 0.162354, -0.243204, 0.649334, -0.720568, -0.018375, 0.955693, -0.278682 ), Transform3D( -0.355918, 0.933626, 0.0407944, -0.922666, -0.344139, -0.173941, -0.148357, -0.0995485, 0.983911, 0.0065217, 0.932358, -0.265492 ), Transform3D( -0.227983, 0.347223, 0.909648, -0.929378, 0.200954, -0.309634, -0.290309, -0.915999, 0.276888, 0.00459915, 0.940558, -0.311857 ), Transform3D( -0.145871, -0.956724, 0.251796, -0.979748, 0.174993, 0.0973123, -0.137163, -0.232502, -0.962875, -0.0242475, 0.950377, -0.320638 ), Transform3D( -0.129099, -0.716498, -0.685539, -0.990163, 0.0555344, 0.128423, -0.053944, 0.695375, -0.716619, -0.0295269, 0.948336, -0.300449 ), Transform3D( -0.1291, -0.716498, -0.685539, -0.990163, 0.0555344, 0.128423, -0.053944, 0.695375, -0.716619, -0.0148798, 0.945752, -0.283346 ) ]")
var jointransforms3 = str_to_var("[ Transform3D( 0.0634282, -0.993399, 0.0955754, 0.996042, 0.0570382, -0.0681709, 0.0622695, 0.0995211, 0.993085, -0.0555168, 0.998378, -0.357373 ), Transform3D( 0.0634282, -0.993399, 0.0955754, 0.996042, 0.0570382, -0.0681709, 0.0622695, 0.0995211, 0.993085, -0.0520461, 0.995975, -0.308161 ), Transform3D( -0.815712, 0.0340706, -0.577454, -0.177378, -0.964906, 0.193633, -0.550591, 0.260377, 0.793129, -0.0323824, 0.974704, -0.351154 ), Transform3D( -0.88338, 0.00535922, -0.468628, -0.00120317, -0.999957, -0.00916749, -0.468657, -0.00753447, 0.883348, -0.0130018, 0.968205, -0.377773 ), Transform3D( -0.815848, 0.328598, -0.475832, -0.131924, -0.906924, -0.400106, -0.563018, -0.263652, 0.783262, 0.00334567, 0.968525, -0.408588 ), Transform3D( -0.815848, 0.328598, -0.475832, -0.131924, -0.906924, -0.400106, -0.563018, -0.263652, 0.783262, 0.0152082, 0.977628, -0.429139 ), Transform3D( 0.0634282, -0.993399, 0.0955754, 0.996042, 0.0570382, -0.0681709, 0.0622694, 0.0995211, 0.993085, -0.0429163, 0.981761, -0.349793 ), Transform3D( -0.0101328, -0.84282, -0.5381, 0.985753, 0.0819322, -0.146892, 0.167891, -0.531923, 0.829983, -0.0555563, 0.978085, -0.408836 ), Transform3D( 0.0247917, -0.231541, -0.972509, 0.978265, 0.205954, -0.0240966, 0.205872, -0.950774, 0.231615, -0.034489, 0.983836, -0.441331 ), Transform3D( -0.0188001, 0.0452657, -0.998798, 0.969811, 0.243751, -0.00720771, 0.243132, -0.968781, -0.0484818, -0.0100907, 0.98444, -0.447141 ), Transform3D( -0.0188001, 0.0452657, -0.998798, 0.969811, 0.243751, -0.00720775, 0.243132, -0.968781, -0.0484817, 0.0130088, 0.98516, -0.446973 ), Transform3D( 0.0634282, -0.993399, 0.0955754, 0.996042, 0.0570382, -0.0681709, 0.0622694, 0.0995211, 0.993085, -0.0456384, 0.998505, -0.346133 ), Transform3D( 0.0908061, -0.951679, -0.293362, 0.93566, 0.182404, -0.302107, 0.341019, -0.247054, 0.907012, -0.0589876, 1.00078, -0.406584 ), Transform3D( 0.110386, -0.740131, -0.66334, 0.92842, 0.315014, -0.196984, 0.354755, -0.594114, 0.721926, -0.0459881, 1.01417, -0.446776 ), Transform3D( 0.181654, -0.642287, -0.744627, 0.892475, 0.425633, -0.149413, 0.412904, -0.63742, 0.650543, -0.0271236, 1.01977, -0.467307 ), Transform3D( 0.181654, -0.642287, -0.744627, 0.892475, 0.425633, -0.149413, 0.412904, -0.63742, 0.650543, -0.00863028, 1.0244, -0.484688 ), Transform3D( 0.0634282, -0.993399, 0.0955754, 0.996042, 0.0570382, -0.0681709, 0.0622694, 0.0995211, 0.993085, -0.0483265, 1.01348, -0.343465 ), Transform3D( 0.173889, -0.96557, -0.193489, 0.839972, 0.247987, -0.482648, 0.514013, -0.0785985, 0.854174, -0.0529575, 1.01979, -0.398633 ), Transform3D( 0.247053, -0.721639, -0.646685, 0.813658, 0.516921, -0.265993, 0.526236, -0.460466, 0.714875, -0.0451687, 1.03922, -0.433017 ), Transform3D( 0.29998, -0.594921, -0.745709, 0.815732, 0.565244, -0.122799, 0.494563, -0.571462, 0.654858, -0.0274295, 1.04651, -0.452627 ), Transform3D( 0.29998, -0.594921, -0.745709, 0.815732, 0.565244, -0.122799, 0.494563, -0.571462, 0.654858, -0.00961157, 1.05075, -0.469888 ), Transform3D( 0.475273, -0.879655, -0.0179547, 0.829807, 0.454937, -0.323191, 0.292464, 0.138705, 0.946164, -0.0442423, 1.02146, -0.342581 ), Transform3D( 0.246481, -0.958103, -0.145895, 0.619519, 0.271531, -0.736524, 0.745281, 0.0911544, 0.66049, -0.0433964, 1.03669, -0.387168 ), Transform3D( 0.329488, -0.660259, -0.674904, 0.517153, 0.72426, -0.45607, 0.789931, -0.198759, 0.58009, -0.0387697, 1.06005, -0.408114 ), Transform3D( 0.392193, -0.682388, -0.616873, 0.561594, 0.708741, -0.426964, 0.728558, -0.17898, 0.661188, -0.0246191, 1.06961, -0.420276 ), Transform3D( 0.392193, -0.682388, -0.616873, 0.561594, 0.708741, -0.426964, 0.728558, -0.17898, 0.661188, -0.0116157, 1.08002, -0.435649 ) ]")
var jointtransforms = [jointransforms1,jointransforms2,jointransforms3]

var hand_joint_node_shortnames = [ "hwr", 
	"ht0", "ht1", "ht2", "ht3",
	"hi0", "hi1", "hi2", "hi3", "hi4", 
	"hm0", "hm1", "hm2", "hm3", "hm4", 
	"hr0", "hr1", "hr2", "hr3", "hr4", 
	"hl0", "hl1", "hl2", "hl3", "hl4" ] 

func rotationtoalign(a, b):
	var axis = a.cross(b).normalized();
	if (axis.length_squared() != 0):
		var dot = a.dot(b)/(a.length()*b.length())
		dot = clamp(dot, -1.0, 1.0)
		var angle_rads = acos(dot)
		return Basis(axis, angle_rads)
	return Basis()

func basisfrom(a, b):
	var vx = (b - a).normalized()
	var vy = vx.cross(-a.normalized())
	var vz = vx.cross(vy)
	return Basis(vx, vy, vz)

func veclengstretchrat(vecB, vecT):
	var vecTleng = vecT.length()
	var vecBleng = vecB.length()
	var vecldiff = vecTleng - vecBleng
	return vecldiff/vecBleng


func applyjointpose(jointtransform):
	for i in range(26):
		$quickjointnodes.get_child(i).transform = jointtransform[i]
		print("kk ", i, " ", jointtransform[i].origin)
	sethandposfromnodes()

const XR_HAND_JOINT_COUNT_EXT = 26
func Dskel_backtoOXRjointtransforms(joint_transforms, skel):
	joint_transforms[0] = skel.global_transform*skel.get_bone_pose(0)
	for i in range(1, XR_HAND_JOINT_COUNT_EXT):
		var ip = skel.get_bone_parent(i)
		print(i, " ", skel.get_bone_name(i), " ", ip)
		joint_transforms[i] = joint_transforms[ip] * skel.get_bone_rest(i)
		#joint_transforms[i] = joint_transforms[0]*skel.get_bone_global_pose(i)
	var jwrist = joint_transforms[XR_HAND_JOINT_COUNT_EXT-1]
	for i in range(XR_HAND_JOINT_COUNT_EXT-1, -1, -1):
		joint_transforms[i] = joint_transforms[i-1]
	joint_transforms[0] = jwrist
	
var ovrhandrestdata = null
var lowpolyhandrestdata = null
var rpmavatarhandrestdata = null
var gxthandrestdata = null
func _ready():
	ovrhandrestdata = OpenXRtrackedhand_funcs.getovrhandrestdata(ovrhandmodel)
	#lowpolyhandrestdata = OpenXRtrackedhand_funcs.getlowpolyhandrestdata($RightHand)
	#rpmavatarhandrestdata = OpenXRtrackedhand_funcs.getrpmhandrestdata(rpmavatar)
	#gxthandrestdata = OpenXRtrackedhand_funcs.getGXThandrestdata($RightHandGXT)
	#$RightHandGXT/AnimationTree.active = false
	#Dskel_backtoOXRjointtransforms(jointtransforms[0], $ValveHandModelLeft/Armature_001/Skeleton3D)
	
	var mi = $quickjointnodes.get_child(0)
	while $quickjointnodes.get_child_count() < 26:
		$quickjointnodes.add_child(mi.duplicate())
	applyjointpose(jointtransforms[0])
		
	$TrackballCameraOrigin.transform.origin = jointtransforms[0][0].origin
	
	var Dskel = $ovr_right_hand_model/ArmatureRight/Skeleton3D

# (A.basis, A.origin)*(B.basis, B.origin) = (A.basis*B.basis, A.origin + A.basis*B.origin)ovrhandrestdata
func sethandposfromnodes():
	var joint_transforms = jointtransforms[0]
	var h = OpenXRtrackedhand_funcs.gethandjointpositionsL(joint_transforms)
	
	#$MeshInstance_marker2.global_transform = $Right_hand/Wrist/ThumbMetacarpal/ThumbProximal/ThumbDistal/ThumbTip.global_transform
#	$MeshInstance_marker2.global_transform = $Right_hand/Wrist/ThumbMetacarpal/ThumbProximal/ThumbDistal.global_transform
	$MeshInstance_marker2.global_transform.origin = h["ht3"]

	if false and $RightHandGXT.visible:
		var gxthandpose = OpenXRtrackedhand_funcs.setshapetobonesLowPoly(joint_transforms, gxthandrestdata, true)
		var skel = gxthandrestdata["skel"]
		print(skel, " ", $RightHandGXT/hand_r/Armature_Left/Skeleton3D)
		for i in range(25):
			var t = skel.get_bone_rest(i)
			t = skel.get_bone_rest(i) * gxthandpose[i]
			skel.set_bone_pose_rotation(i, Quaternion(t.basis))
			skel.set_bone_pose_position(i, t.origin)
		$RightHandGXT.transform = gxthandpose["handtransform"]
		$MeshInstance_marker.global_transform = skel.global_transform*skel.get_bone_global_pose(3)

		#$MeshInstance_marker/MeshInstance_marker.scale = Vector3(0.1,0.1,1)
		return 		
		
	
	if false and $RightHand.visible:
		var lowpolyhandpose = OpenXRtrackedhand_funcs.setshapetobonesLowPoly(joint_transforms, lowpolyhandrestdata, true)
		var skel = lowpolyhandrestdata["skel"]

		print("sdfsf")
		print(skel.get_bone_rest(0)*skel.get_bone_pose(0))
		print(skel.get_bone_global_pose(0))
		print(skel.get_bone_rest(0)*skel.get_bone_pose(0)*skel.get_bone_rest(4)*skel.get_bone_pose(4))
		print(skel.get_bone_global_pose(4))

		for i in range(20):
			skel.set_bone_pose(i, lowpolyhandpose[i])

		print(skel.get_bone_pose(4))
		print(lowpolyhandpose[4])
		print("ggg")
		print(skel.get_bone_rest(0)*skel.get_bone_pose(0)*skel.get_bone_rest(4)*skel.get_bone_pose(4))
		print(skel.get_bone_global_pose(4))

#		$RightHand.transform = lowpolyhandpose["handtransform"]
#		$MeshInstance_marker.global_transform = skel.global_transform*skel.get_bone_global_pose(6)
		
#		$MeshInstance_marker.global_transform = skel.global_transform*skel.get_bone_global_pose(4)
		#$MeshInstance_marker/MeshInstance_marker.scale = Vector3(0.1,0.1,1)
		return 		

	if Dapply_readyplayerme_hand:
		var rpmavatar = rpmavatarhandrestdata["rpmavatar"]
		var skel = rpmavatarhandrestdata["skel"]
		assert (skel.get_bone_name(33) == "RightShoulder")
		assert (skel.get_bone_name(34) == "RightArm")
		assert (skel.get_bone_name(35) == "RightForeArm")

		var skelrightshouldergtrans = skel.global_transform*skel.get_bone_global_pose(33)
		var skelrightarmrest = skelrightshouldergtrans*rpmavatarhandrestdata[34]

		#var skelrightarmgtrans = skel.global_transform*skel.get_bone_global_pose(34)

		var rpmhandspose = { }
		OpenXRtrackedhand_funcs.setshapetobonesRPM(h, skelrightarmrest, rpmhandspose, rpmavatarhandrestdata, true)
		for i in range(34, 57):
			#skel.set_bone_pose(i, rpmhandspose[i])
			skel.set_bone_pose_rotation(i, Quaternion(rpmhandspose[i].basis))
		$MeshInstance_marker.global_transform = skelrightarmrest
		$MeshInstance_marker.global_transform = skel.global_transform*skel.get_bone_global_pose(34)
		$MeshInstance_marker3.global_transform = skel.global_transform*skel.get_bone_global_pose(35)
		print($MeshInstance_marker.global_transform.origin, $MeshInstance_marker3.global_transform.origin)
		$MeshInstance_marker2.global_transform = skel.global_transform*skel.get_bone_global_pose(36)
		return

	var ovrhandpose = OpenXRtrackedhand_funcs.setshapetobonesOVR(joint_transforms, ovrhandrestdata)
	var skel = ovrhandrestdata["skel"]
	ovrhandmodel.transform = ovrhandpose["handtransform"]
	for i in ovrhandrestdata["boneindexes"]:
		if ovrhandpose.has(i):
			skel.set_bone_pose_rotation(i, Quaternion(ovrhandpose[i].basis))
			skel.set_bone_pose_position(i, ovrhandpose[i].origin)

	#$MeshInstance.global_transform.origin = $Right_hand.global_transform*h["hi1"]
	#$MeshInstance_marker.global_transform = skel.global_transform*skel.get_bone_global_pose(5)
	#$MeshInstance_marker/MeshInstance_marker.scale = Vector3(100,100,100)

func _input(event):
	if event is InputEventKey and event.pressed:
		if event.keycode == KEY_P:
			jointtransforms.push_back(jointtransforms.pop_front())
			applyjointpose(jointtransforms[0])	
